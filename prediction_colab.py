# -*- coding: utf-8 -*-
"""task_kds.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T8HecVJv7izGM9cLa4HM7cJWmcPSo2DA
"""

import pandas as pd
import numpy as np
import seaborn as sns
import scipy.stats

#from google.colab import files
#uploaded = files.upload()

data=pd.read_excel('/content/HCP_Data_KDAG_Hackathon.xlsx')
data.columns

data.head()
## Creation of Additional Features 
#data['Calendardate']=pd.to_datetime(data['Calendardate'])
#data['Calendar_Month']=data['Calendardate'].dt.month
#data['Calendar_Year']=data['Calendardate'].dt.year

data['Physician_Segment'].value_counts(normalize=True)

pd.crosstab(data['Number of Competition'],data['Client Type'],margins=True,normalize='columns')

data.groupby('Physician_ID').mean()

#data.groupby('Brand_Rx').mean()

data.corr()[['Brand_Rx']]

## Consolidated Strategy for Targeting
        
import seaborn as sns
cm = sns.light_palette("green", as_cmap=True)
correlation_analysis=pd.DataFrame(data[['Brand_Rx',
'Sales_Rep_Calls', 'Samples_Dropped', 'Emails_Delivered',
       'Speaker_Programs_Attended', 'Vouchers_Dropped']].corr()['Brand_Rx']).reset_index()
correlation_analysis.columns=['Impacting Variable','Degree of Linear Impact (Correlation)']
correlation_analysis=correlation_analysis[correlation_analysis['Impacting Variable']!='Brand_Rx']
correlation_analysis=correlation_analysis.sort_values('Degree of Linear Impact (Correlation)',ascending=False)
correlation_analysis.style.background_gradient(cmap=cm).set_precision(2)

# Import seaborn library
import seaborn as sns
cm = sns.light_palette("green", as_cmap=True)
correlation_analysis=pd.DataFrame(data.groupby('Physician_ID')[['Brand_Rx',
'Sales_Rep_Calls', 'Samples_Dropped', 'Emails_Delivered',
       'Speaker_Programs_Attended', 'Vouchers_Dropped']].corr()['Brand_Rx']).reset_index()
correlation_analysis=correlation_analysis.sort_values(['Physician_ID','Brand_Rx'],ascending= True)
correlation_analysis.columns=['Acc Type','Variable Impact on Sales','Impact']
correlation_analysis=correlation_analysis[correlation_analysis['Variable Impact on Sales']!='Brand_Rx'].reset_index(drop=True)
correlation_analysis.style.background_gradient(cmap=cm).set_precision(2)

import statsmodels.api as sm
import statsmodels.formula.api as smf
data.columns=[mystring.replace(" ", "_") for mystring in data.columns]
data.columns=[mystring.replace("(", "") for mystring in data.columns]
data.columns=[mystring.replace(")", "") for mystring in data.columns]
results = smf.ols('Brand_Rx ~ Sales_Rep_Calls+Emails_Delivered+Samples_Dropped+\
       Vouchers_Dropped	 + Speaker_Programs_Attended',data=data).fit()
print(results.summary())

#df = pd.read_html(results.summary().tables[1].as_html(),header=0,index_col=0)[0]

#df=df.reset_index()
#df=df[df['P>|t|']<0.05][['index','coef']]
#df

consolidated_summary=pd.DataFrame()
for acctype in list(set(list(data['Physician_ID']))):
    temp_data=data[data['Physician_ID']==acctype].copy()
    results = smf.ols('Brand_Rx ~ Sales_Rep_Calls+Emails_Delivered+Samples_Dropped+\
       Vouchers_Dropped	 + Speaker_Programs_Attended', data=temp_data).fit()
    df = pd.read_html(results.summary().tables[1].as_html(),header=0,index_col=0)[0].reset_index()
    df=df[['index','coef']]
    df.columns=['Variable','Coefficent (Impact)']
    df['Account Type']=acctype
    df=df.sort_values('Coefficent (Impact)',ascending=False)
    df=df[df['Variable']!='Intercept']
    print(acctype)
    consolidated_summary=consolidated_summary.append(df)
    print(df)
    #print(results.summary())

print(type(df))

consolidated_summary=pd.DataFrame()
for acctype in list(set(list(data['Physician_ID']))):
    temp_data=data[data['Physician_ID']==acctype].copy()
    results = smf.ols('Brand_Rx ~ Sales_Rep_Calls+Emails_Delivered+Samples_Dropped+\
       Vouchers_Dropped	 + Speaker_Programs_Attended', data=temp_data).fit()
    df = pd.read_html(results.summary().tables[1].as_html(),header=0,index_col=0)[0].reset_index()
    df=df[['index','coef']]
    df.columns=['Variable','Coefficent (Impact)']
    df['Account Type']=acctype
    df=df.sort_values('Coefficent (Impact)',ascending=False)
    df=df[df['Variable']!='Intercept']
    print(acctype)
    consolidated_summary=consolidated_summary.append(df)

    if df.iloc[0][0]=='Vouchers_Dropped':
      print(df.iloc[1])
    print(df.iloc[:1])

# consolidated_summary=pd.DataFrame()
# for acctype in list(set(list(data['Physician_ID']))):
#     temp_data=data[data['Physician_ID']==acctype].copy()
#     results = smf.ols('Brand_Rx ~ Sales_Rep_Calls+Emails_Delivered+Samples_Dropped+\
#        Vouchers_Dropped	 + Speaker_Programs_Attended', data=temp_data).fit()
#     print(results)

import statsmodels.api as sm
import statsmodels.formula.api as smf
consolidated_summary=pd.DataFrame()
for acctype in list(set(list(data['Physician_ID']))):
    print(acctype)
    temp_data=data[data['Physician_ID']==acctype].copy()
    results = smf.ols('Brand_Rx ~ Sales_Rep_Calls+Emails_Delivered+Samples_Dropped+\
       Vouchers_Dropped	 + Speaker_Programs_Attended', data=temp_data).fit()
    df = pd.read_html(results.summary().tables[1].as_html(),header=0,index_col=0)[0].reset_index()
    df=df[['index','coef']]
    df.columns=['Variable','Coefficent (Impact)']
    df['Account Type']=acctype
    df=df.sort_values('Coefficent (Impact)',ascending=False)
    df=df[df['Variable']!='Intercept']
    consolidated_summary=consolidated_summary.append(df)
    print(results.summary())

print(type(results))

# consolidated_summary
# consolidated_summary.reset_index(inplace=True)
# consolidated_summary.drop('index',inplace=True,axis=1)
# consolidated_summary.columns = ['Variable','Return on Investment','Account Type']
# consolidated_summary['Return on Investment']= consolidated_summary['Return on Investment'].apply(lambda x: round(x,1))
# consolidated_summary.style.background_gradient(cmap='RdYlGn')

# import seaborn as sns
# import matplotlib.pyplot as plt 
# def format(x):
#         return "${:.1f}".format(x)
# consolidated_summary['Return on Investment']  = consolidated_summary['Return on Investment'].apply(format)
# consolidated_summary.columns = ['Variable','Return on Investment','Account Type']
# consolidated_summary.style.background_gradient(cmap='RdYlGn')